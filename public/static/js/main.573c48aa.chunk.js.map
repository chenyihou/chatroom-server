{"version":3,"sources":["routes/Home.js","routes/Register.js","Components/ChatroomHeader.js","Components/ChatroomSider.js","Components/ChatroomComment.js","Components/ChatroomContent.js","Container/ChatroomContentContainer.js","routes/Chatroom.js","routes/Login.js","routes/index.js","index.js"],"names":["Home","react_default","a","createElement","style","display","alignContent","justifyContent","height","react_apollo_browser_umd","query","gql","_templateObject","_ref","loading","error","data","spin","console","log","allUsers","map","_ref2","id","username","key","REGISTER","Register_templateObject","muStyle","alignItems","Register","sendMsg","_callee","values","register","password","email","msg","_msg$data$register","ok","errors","regenerator_default","wrap","_context","prev","next","variables","sent","message","success","_this","props","history","push","forEach","e","state","stop","this","handleSubmit","_callee2","_context2","preventDefault","form","validateFields","err","_this2","getFieldDecorator","mutation","_ref3","es_form","onSubmit","className","Item","rules","required","input","name","prefix","icon","type","color","placeholder","valuePropName","initialValue","es_checkbox","es_button","htmlType","React","Component","Form","create","ChatroomHeader","ChatroomSider","ChatroomSider_templateObject","list","itemLayout","dataSource","renderItem","item","Meta","avatar","title","href","description","TextArea","Input","Editor","onChange","value","rows","onClick","CommentCom","send","text","setState","handleChange","target","comment","content","ChatroomComment_Editor","COMMENT","ChatroomComment_templateObject","ALL_MESSAGES","_templateObject2","ex","update","cache","createMessage","allMessages","readQuery","writeQuery","concat","_ref4","ChatroomComment_CommentCom","ChatroomContent","overflow","actions","author","datetime","ChatroomContentContainer","ChatroomContentContainer_templateObject","user","created_at","moment","parseInt","fromNow","Header","Layout","Footer","Sider","Content","Chatroom","layout","backgroundColor","overflowY","ChatroomComment","LOGIN","Login_templateObject","Login","login","_msg$data$login","token","refreshToken","localStorage","setItem","location","from","pathname","Link","to","PrivateRoute","component","rest","Object","objectWithoutProperties","Route","assign","render","getItem","decode","isAuthenticated","Redirect","routes","BrowserRouter","Switch","routes_PrivateRoute","exact","path","httpLink","createHttpLink","uri","authLink","setContext","_","headers","objectSpread","authorization","client","ApolloClient","link","InMemoryCache","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.573c48aa.chunk.js","sourcesContent":["import {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\nimport React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nexport default() => (\r\n    <div style={{display:'flex',alignContent:'center ',justifyContent:'center',height:'100vh'}}>\r\n    <Query query={gql ` { allUsers{ id,username } } `}>\r\n        {({loading, error, data}) => {\r\n            if (loading) \r\n                return  <Spin />;\r\n            if (error) \r\n                return <p>{error}error</p>;\r\n            console.log(data)\r\n            return data\r\n                .allUsers\r\n                .map(({id, username}) => (\r\n                    <div key={id}>\r\n                        <p>{username}</p>\r\n                    </div>\r\n                ));\r\n        }}\r\n    </Query>\r\n    </div>\r\n);\r\n","import gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { Form, Icon, message, Button, Input, Checkbox } from \"antd\";\r\nimport React from \"react\";\r\nconst REGISTER = gql`\r\n    mutation ($username: String!, $email: String!, $password: String!) {\r\n        register(username: $username, email: $email, password: $password) {\r\n            ok\r\n            errors {\r\n                path\r\n                message\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst muStyle={\r\n    display:'flex',\r\n    alignItems:'center',\r\n    justifyContent:'center',\r\n    height:'100vh'\r\n}\r\n\r\nclass Register extends React.Component {\r\n\r\n    sendMsg = async (values, register) => {\r\n        const { username, password, email } = values;\r\n\r\n        const msg = await register({\r\n            variables: { username, email, password }\r\n        });\r\n        const { ok, errors } = msg.data.register;\r\n        if (ok) {\r\n            message.success(\"Register successfully\");\r\n            this.props.history.push(\"/login\");\r\n        } else {\r\n            errors.forEach(e => {\r\n                message.error(e.message);\r\n            });\r\n            console.log(this.state);\r\n        }\r\n    };\r\n\r\n    handleSubmit = async (e, register) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                this.sendMsg(values, register);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div style={muStyle}>\r\n                <Mutation mutation={REGISTER}> \r\n                    {(register, { data }) => (\r\n                        <Form\r\n                            onSubmit={e => this.handleSubmit(e, register)}\r\n                            className=\"login-form\"\r\n                            style={{}}\r\n                        >\r\n                            <Form.Item>\r\n                                {getFieldDecorator(\"username\", {\r\n                                    rules: [\r\n                                        {\r\n                                            required: true,\r\n                                            message: \"Please input your username!\"\r\n                                        }\r\n                                    ]\r\n                                })(\r\n                                    <Input\r\n                                        name=\"username\"\r\n                                        prefix={\r\n                                            <Icon\r\n                                                type=\"user\"\r\n                                                style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                            />\r\n                                        }\r\n                                        placeholder=\"Username\"\r\n                                    />\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                {getFieldDecorator(\"email\", {\r\n                                    rules: [\r\n                                        {\r\n                                            required: true,\r\n                                            message: \"Please input your email!\"\r\n                                        }\r\n                                    ]\r\n                                })(\r\n                                    <Input\r\n                                        name=\"email\"\r\n                                        prefix={\r\n                                            <Icon\r\n                                                type=\"mail\"\r\n                                                style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                            />\r\n                                        }\r\n                                        placeholder=\"Email\"\r\n                                    />\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                {getFieldDecorator(\"password\", {\r\n                                    rules: [\r\n                                        {\r\n                                            required: true,\r\n                                            message: \"Please input your Password!\"\r\n                                        }\r\n                                    ]\r\n                                })(\r\n                                    <Input\r\n                                        name=\"password\"\r\n                                        type=\"password\"\r\n                                        prefix={\r\n                                            <Icon\r\n                                                type=\"lock\"\r\n                                                style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                            />\r\n                                        }\r\n                                        placeholder=\"Password\"\r\n                                    />\r\n                                )}\r\n                            </Form.Item>\r\n                            <Form.Item>\r\n                                {getFieldDecorator(\"remember\", {\r\n                                    valuePropName: \"checked\",\r\n                                    initialValue: true\r\n                                })(<Checkbox>Remember me</Checkbox>)}\r\n                                {/* <a className=\"login-form-forgot\" href=\"\">Forgot password</a> */}\r\n                                <Button\r\n                                    type=\"primary\"\r\n                                    htmlType=\"submit\"\r\n                                    className=\"login-form-button\"\r\n                                >\r\n                                    Register\r\n                                </Button>\r\n                                {/* Or <a href=\"\">register now!</a> */}\r\n                            </Form.Item>\r\n                        </Form>\r\n                    )}\r\n                </Mutation>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Form.create()(Register);\r\n","import React from 'react';\r\nimport {Icon} from 'antd'\r\n\r\nexport default ()=>(<div><Icon type=\"home\" />  Chat Room</div>)","import React from 'react';\r\nimport {List, Avatar, Spin} from 'antd';\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\nexport default()=>(\r\n<Query query = {gql ` { allUsers{ id,username, } } `} >\r\n    {\r\n        ({loading, error, data}) => {\r\n            if (loading) \r\n                return <Spin/>;\r\n            if (error) \r\n                return <p>{error}error</p>;\r\n            console.log(data,\"data\")\r\n            return  (\r\n                <List\r\n                    itemLayout=\"horizontal\"\r\n                    dataSource={data.allUsers}\r\n                    renderItem={item => (\r\n                    <List.Item>\r\n                    <List.Item.Meta\r\n                        avatar={< Avatar icon = \"user\" / >}\r\n                        title = { < a href = \"https://ant.design\" > {\r\n                            item.username\r\n                        } < /a>}\r\n                        description={item.description||\"\"}/ > \r\n                    </List.Item>)} />);\r\n        }\r\n    }\r\n< /Query>)","import {\r\n    Comment,\r\n    Avatar,\r\n    Form,\r\n    Button,\r\n    message,\r\n    Input\r\n} from 'antd';\r\nimport React from 'react'\r\nimport gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\n\r\n\r\n\r\nconst TextArea = Input.TextArea;\r\n\r\n\r\nconst Editor = ({onChange, onSubmit, value}) => (\r\n    <div>\r\n        <Form.Item>\r\n            <TextArea rows={4} onChange={onChange} value={value}/>\r\n        </Form.Item>\r\n        <Form.Item>\r\n            <Button\r\n                htmlType=\"submit\"\r\n                onClick={onSubmit}\r\n                type=\"primary\">\r\n                Add Comment\r\n            </Button>\r\n        </Form.Item>\r\n    </div>\r\n);\r\n\r\nclass CommentCom extends React.Component {\r\n    state = {\r\n        value: ''\r\n    }\r\n\r\n    handleSubmit =async () => {\r\n        const {send}=this.props\r\n        if(await send({variables:{text:this.state.value}})){\r\n            message.success('Message is sent')\r\n            this.setState({value:''})\r\n        }\r\n        else {\r\n            message.error('Message is not sent')\r\n        }\r\n        \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({value: e.target.value});\r\n    }\r\n\r\n    render() {\r\n        const {  value} = this.state;\r\n\r\n        return (\r\n            <div>\r\n                <Comment\r\n                    avatar={(<Avatar\r\n                    icon='user'/>)}\r\n                    content={(<Editor\r\n                    onChange={this.handleChange}\r\n                    onSubmit={this.handleSubmit}\r\n                    value={value}/>)}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst COMMENT = gql`\r\nmutation ($text:String!){\r\n    createMessage( text: $text){\r\n        id\r\n        text\r\n        user{\r\n          id\r\n          username\r\n        }\r\n        created_at\r\n      }\r\n  }\r\n`;\r\n\r\nconst ALL_MESSAGES=gql` { allMessages{\r\n    id\r\n    text\r\n    created_at\r\n    user{\r\n      id\r\n      username\r\n    }\r\n  } } `\r\n\r\nconst ex=()=>(<Mutation mutation={COMMENT} update={(cache, { data: { createMessage } }) => {\r\n    const  {allMessages}  = cache.readQuery({ query: ALL_MESSAGES });\r\n    console.log(createMessage)\r\n    cache.writeQuery({\r\n      query: ALL_MESSAGES,\r\n      data: { allMessages: allMessages.concat([createMessage]) },\r\n    });\r\n  }}>\r\n      {(createMessage, { data }) => (\r\n          <CommentCom send={createMessage} />\r\n      )}\r\n    </Mutation>)\r\n\r\n\r\nexport default ex","import React from 'react'\r\n\r\nimport {Comment, List} from 'antd';\r\nexport default({data}) => (\r\n    <div style={{overflow:'scroll',height:'60vh'}}>\r\n    <List\r\n    \r\n        className=\"comment-list\"\r\n        itemLayout=\"horizontal\"\r\n        dataSource={data}\r\n        renderItem={item => (\r\n        <Comment\r\n            actions={item.actions}\r\n            author={item.author}\r\n            avatar={item.avatar}\r\n            content={item.content}\r\n            datetime={item.datetime}/>\r\n    )}/>\r\n    </div>\r\n)","import React from 'react';\r\nimport ChatroomContent from '../Components/ChatroomContent';\r\nimport moment from 'moment';\r\nimport {Spin, Avatar} from 'antd';\r\nimport {Query} from \"react-apollo\";\r\nimport gql from \"graphql-tag\";\r\n\r\n\r\n\r\nexport default () => (\r\n    <Query query={gql ` { allMessages{\r\n        id\r\n        text\r\n        created_at\r\n        user{\r\n          id\r\n          username\r\n        }\r\n      } } `}>\r\n        {({loading, error, data}) => {\r\n            if (loading) \r\n                return  <Spin />;\r\n            if (error) \r\n                return <p>{error}error</p>;\r\n            console.log(data)\r\n            data=data\r\n                    .allMessages\r\n                    .map(({id, text,user,created_at}) => (\r\n                        {author:user.username,\r\n                        content:text,\r\n                        avatar: (<Avatar\r\n                            icon='user'/ >),\r\n                        datetime:moment(parseInt(created_at)).fromNow()\r\n                        }));\r\n            return <ChatroomContent data={data}/>\r\n        }}\r\n    </Query>\r\n)\r\n\r\n","import React from 'react';\r\nimport ChatroomHeader from '../Components/ChatroomHeader'\r\nimport ChatroomSider from '../Components/ChatroomSider'\r\nimport ChatroomComment from '../Components/ChatroomComment'\r\nimport ChatroomContentContainer from '../Container/ChatroomContentContainer'\r\nimport {Layout} from 'antd';\r\n\r\nconst {Header, Footer, Sider, Content} = Layout;\r\n\r\n// let userList=[{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'},{id:1,name:'a',description:'usera'},{id:2,name:'b',description:'userb'}]\r\n\r\nexport default() => (\r\n    <Layout style={{height:'100vh',}}>\r\n        <Sider style={{backgroundColor:'transparent', overflowY:'scroll'}}><ChatroomSider/></Sider>\r\n        <Layout>\r\n            <Header style={{backgroundColor:'transparent'}}><ChatroomHeader/></Header>\r\n            <Content ><ChatroomContentContainer /></Content>\r\n            <Footer><ChatroomComment name=\"name\"/></Footer>\r\n        </Layout>\r\n    </Layout>\r\n)","import gql from \"graphql-tag\";\r\nimport { Mutation } from \"react-apollo\";\r\nimport { Form, Icon, message, Button, Input, Checkbox } from \"antd\";\r\nimport React from \"react\";\r\nimport {Link} from \"react-router-dom\"\r\n\r\nconst LOGIN = gql`\r\n    mutation ( $email: String!, $password: String!) {\r\n        login(email: $email, password: $password) {\r\n            ok\r\n            errors {\r\n                path\r\n                message\r\n            }\r\n            token\r\n            refreshToken\r\n        }\r\n    }\r\n`;\r\n\r\nconst muStyle={\r\n    display:'flex',\r\n    alignItems:'center',\r\n    justifyContent:'center',\r\n    height:'100vh'\r\n}\r\n\r\nclass Login extends React.Component {\r\n\r\n    sendMsg = async (values, login) => {\r\n        const { password, email } = values;\r\n\r\n        const msg = await login({\r\n            variables: {email, password }\r\n        });\r\n        const { ok, errors,token,refreshToken } = msg.data.login;\r\n        if (ok) {\r\n            localStorage.setItem('token', token);\r\n            localStorage.setItem('refreshToken', refreshToken);\r\n            message.success(\"Login successfully\");\r\n            let { from } = this.props.location.state || { from: { pathname: \"/\" } }\r\n            this.props.history.push('/chatroom');\r\n            // this.props.history.push(from);\r\n        } else {\r\n            errors.forEach(e => {\r\n                message.error(e.message);\r\n            });\r\n            console.log(this.state);\r\n        }\r\n    };\r\n\r\n    handleSubmit = async (e, login) => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                this.sendMsg(values, login);\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <div style={muStyle}>\r\n            <Mutation mutation={LOGIN}> \r\n                {(login, { data }) => (\r\n                    <Form\r\n                        onSubmit={e => this.handleSubmit(e, login)}\r\n                        className=\"login-form\"\r\n                        style={{}}\r\n                    >\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"email\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your email!\"\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    name=\"email\"\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"mail\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Email\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"password\", {\r\n                                rules: [\r\n                                    {\r\n                                        required: true,\r\n                                        message: \"Please input your Password!\"\r\n                                    }\r\n                                ]\r\n                            })(\r\n                                <Input\r\n                                    name=\"password\"\r\n                                    type=\"password\"\r\n                                    prefix={\r\n                                        <Icon\r\n                                            type=\"lock\"\r\n                                            style={{ color: \"rgba(0,0,0,.25)\" }}\r\n                                        />\r\n                                    }\r\n                                    placeholder=\"Password\"\r\n                                />\r\n                            )}\r\n                        </Form.Item>\r\n                        <Form.Item>\r\n                            {getFieldDecorator(\"remember\", {\r\n                                valuePropName: \"checked\",\r\n                                initialValue: true\r\n                            })(<Checkbox>Remember me</Checkbox>)}\r\n                            {/* <a className=\"login-form-forgot\" href=\"\">Forgot password</a> */}\r\n                            <Button\r\n                                type=\"primary\"\r\n                                htmlType=\"submit\"\r\n                                className=\"login-form-button\"\r\n                            >       \r\n                                Log In\r\n                            </Button>\r\n                            <br/>\r\n                            Or <Link to='/register'>register now!</Link>\r\n                        </Form.Item>\r\n                    </Form>\r\n                )}\r\n            </Mutation>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form.create()(Login);\r\n","import React from \"react\";\r\nimport {BrowserRouter as Router, Route, Switch, Redirect} from \"react-router-dom\";\r\nimport Home from './Home'\r\nimport Register from './Register'\r\nimport Chatroom from './Chatroom'\r\nimport Login from './Login'\r\nimport decode from 'jwt-decode'\r\n\r\nconst isAuthenticated=()=>{\r\n    const token=localStorage.getItem('token')\r\n    const refreshToken=localStorage.getItem('refreshToken')\r\n    try{\r\n        decode(token)\r\n        decode(refreshToken)\r\n    } catch(err){\r\n        return false\r\n    }\r\n    return true\r\n}\r\n\r\nconst PrivateRoute=({ component: Component, ...rest })=> {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={props =>\r\n          isAuthenticated() ? (\r\n            <Component {...props} />\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: { from: props.location }\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\nexport default() => (\r\n    <Router>\r\n            <Switch>\r\n                <PrivateRoute exact path=\"/\" component={Home}/>\r\n                <PrivateRoute path=\"/chatroom\" component={Chatroom}/>\r\n                <Route  path=\"/register\" component={Register}/>\r\n                <Route  path=\"/login\" component={Login}/>\r\n            </Switch>\r\n    </Router>\r\n)","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {ApolloProvider} from \"react-apollo\";\r\nimport Routes from './routes'\r\nimport 'antd/dist/antd.css';\r\nimport {ApolloClient} from 'apollo-client';\r\nimport {createHttpLink} from 'apollo-link-http';\r\nimport {setContext} from 'apollo-link-context';\r\nimport {InMemoryCache} from 'apollo-cache-inmemory';\r\n\r\nconst httpLink = createHttpLink({uri: 'http://localhost:4000/graphql'});\r\n\r\nconst authLink = setContext((_, {headers}) => {\r\n    // get the authentication token from local storage if it exists\r\n    const token = localStorage.getItem('token');\r\n    // return the headers to the context so httpLink can read them\r\n    return {\r\n        headers: {\r\n            ...headers,\r\n            authorization: token\r\n                ? `${token}`\r\n                : \"\"\r\n        }\r\n    }\r\n});\r\n\r\nconst client = new ApolloClient({\r\n    link: authLink.concat(httpLink),\r\n    cache: new InMemoryCache()\r\n});\r\n\r\n// Create the client as outlined above\r\nconst App = () => (\r\n    <ApolloProvider client={client}>\r\n        <Routes/>\r\n    </ApolloProvider>\r\n);\r\n\r\nReactDOM.render(\r\n    <App/>, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}